.. SPDX-FileCopyrightText: Copyright 2018-2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
.. SPDX-License-Identifier: CC-BY-SA-4.0 AND LicenseRef-Patent-license

.. header:: psa/crypto
    :seq: 180

Key management functions
========================

.. _key-creation:

Key creation
------------

New keys can be created in the following ways:

*   `psa_import_key()` creates a key from a data buffer provided by the application.
*   `psa_generate_key()` and `psa_generate_key_custom()` create a key from randomly generated data.
*   `psa_key_derivation_output_key()` and `psa_key_derivation_output_key_custom()` create a key from data generated by a pseudorandom derivation process. See :secref:`kdf`.
*   `psa_key_agreement()` creates a key from the shared secret result of a key-agreement process. See :secref:`key-agreement`.
*   `psa_encapsulate()` and `psa_decapsulate()` create a shared secret key using a key-encapsulation mechanism.
*   `psa_pake_get_shared_key()` creates a key from the shared secret result of a password-authenticated key exchange. See :secref:`pake`.
*   `psa_copy_key()` duplicates an existing key with a different lifetime or with a more restrictive usage policy.
*   `psa_attach_key()` registers existing key material from secure storage for use as a volatile key.

When creating a key, the attributes for the new key are specified in a `psa_key_attributes_t` object. Each key creation function defines how it uses the attributes.

.. note::

    The attributes for a key are immutable after the key has been created.

    The application must set the key algorithm policy and the appropriate key usage flags in the attributes in order for the key to be used in any cryptographic operations.

.. function:: psa_import_key

    .. summary::
        Import a key in binary format.

    .. param:: const psa_key_attributes_t * attributes
        The attributes for the new key.

        The following attributes are required for all keys:

        *   The key type determines how the ``data`` buffer is interpreted.

        The following attributes must be set for keys used in cryptographic operations:

        *   The key permitted-algorithm policy, see :secref:`permitted-algorithms`.
        *   The key usage flags, see :secref:`key-usage-flags`.

        The following attributes must be set for keys that do not use the default `PSA_KEY_LIFETIME_VOLATILE` lifetime:

        *   The key lifetime, see :secref:`key-lifetimes`.
        *   The key identifier is required for a key with a persistent lifetime, see :secref:`key-identifiers`.

        The following attributes are optional:

        *   If the key size is nonzero, it must be equal to the key size determined from ``data``.

        .. note::
            This is an input parameter: it is not updated with the final key attributes.
            The final attributes of the new key can be queried by calling `psa_get_key_attributes()` with the key's identifier.

    .. param:: const uint8_t * data
        Buffer containing the key data.
        The content of this buffer is interpreted according to the type declared in ``attributes``.

        All implementations must support at least the format described in the *Key format* section of the chosen key type.
        Implementations can support other formats, but be conservative in interpreting the key data: it is recommended that implementations reject content if it might be erroneous, for example, if it is the wrong type or is truncated.
    .. param:: size_t data_length
        Size of the ``data`` buffer in bytes.
    .. param:: psa_key_id_t * key
        On success, an identifier for the newly created key. `PSA_KEY_ID_NULL` on failure.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
        If the key is persistent, the key material and the key's metadata have been saved to persistent storage.
    .. retval:: PSA_ERROR_ALREADY_EXISTS
        This is an attempt to create a persistent key, and there is already a persistent key with the given identifier.
    .. retval:: PSA_ERROR_NOT_SUPPORTED
        The key attributes, as a whole, are not supported, either by the implementation in general or in the specified storage location.
    .. retval:: PSA_ERROR_INVALID_ARGUMENT
        The following conditions can result in this error:

        *   The key type is invalid.
        *   The key size is nonzero, and is incompatible with the key data in ``data``.
        *   The key lifetime is invalid.
        *   The key identifier is not valid for the key lifetime.
        *   The key usage flags include invalid values.
        *   The key's permitted-usage algorithm is invalid.
        *   The key attributes, as a whole, are invalid.
        *   The key data is not correctly formatted for the key type.
    .. retval:: PSA_ERROR_NOT_PERMITTED
        The implementation does not permit creating a key with the specified attributes due to some implementation-specific policy.
    .. retval:: PSA_ERROR_INSUFFICIENT_MEMORY
    .. retval:: PSA_ERROR_INSUFFICIENT_STORAGE
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
    .. retval:: PSA_ERROR_STORAGE_FAILURE
    .. retval:: PSA_ERROR_DATA_CORRUPT
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    The key is extracted from the provided ``data`` buffer. Its location, policy, and type are taken from ``attributes``.

    The provided key data determines the key size. The attributes can optionally specify a key size; in this case it must match the size determined from the key data. A key size of ``0`` in ``attributes`` --- the default value --- indicates that the key size is solely determined by the key data.

    Implementations must reject an attempt to import a key of size ``0``.

    This function supports any output from `psa_export_key()`. Each key type in :secref:`key-types` describes the expected format of keys.

    This specification defines a single format for each key type. Implementations can optionally support other formats in addition to the standard format. It is recommended that implementations that support other formats ensure that the formats are clearly unambiguous, to minimize the risk that an invalid input is accidentally interpreted according to a different format.

    .. note::
        The |API| does not support asymmetric private-key objects outside of a key pair. To import a private key, the ``attributes`` must specify the corresponding key-pair type. Depending on the key type, either the import format contains the public-key data or the implementation will reconstruct the public key from the private key as needed.

.. struct:: psa_custom_key_parameters_t
    :type:

    .. summary::
        Custom production parameters for key generation or key derivation.

        .. versionadded:: 1.3

    .. field:: uint32_t flags
        Flags to control the key production process.
        ``0`` for the default production parameters.

    .. note::

        Future versions of the specification, and implementations, may add other fields in this structure.

    The interpretation of this structure depends on the type of the key. :numref:`tab-custom-key-parameters` shows the custom production parameters for each type of key. See the key type definitions for details of the valid parameter values.

    .. list-table:: Custom key parameters
        :name: tab-custom-key-parameters
        :widths: 1 4
        :header-rows: 1

        *   -   Key type
            -   Custom key parameters

        *   -   RSA

            -   Use the production parameters to select an exponent value that is different from the default value of ``65537``.

                See `PSA_KEY_TYPE_RSA_KEY_PAIR`.

        *   -   Other key types
            -   Reserved for future use.

                ``flags`` must be ``0``.

.. macro:: PSA_CUSTOM_KEY_PARAMETERS_INIT
    :definition: { 0 }

    .. summary::
        The default production parameters for key generation or key derivation.

        .. versionadded:: 1.3

    Calling `psa_generate_key_custom()` or `psa_key_derivation_output_key_custom()` with :code:`custom == PSA_CUSTOM_KEY_PARAMETERS_INIT` and ``custom_data_length == 0`` is equivalent to calling `psa_generate_key()` or `psa_key_derivation_output_key()`
    respectively.

.. function:: psa_generate_key

    .. summary::
        Generate a key or key pair.

    .. param:: const psa_key_attributes_t * attributes
        The attributes for the new key.

        The following attributes are required for all keys:

        *   The key type. It must not be an asymmetric public key.
        *   The key size. It must be a valid size for the key type.

        The following attributes must be set for keys used in cryptographic operations:

        *   The key permitted-algorithm policy, see :secref:`permitted-algorithms`.
        *   The key usage flags, see :secref:`key-usage-flags`.

        The following attributes must be set for keys that do not use the default `PSA_KEY_LIFETIME_VOLATILE` lifetime:

        *   The key lifetime, see :secref:`key-lifetimes`.
        *   The key identifier is required for a key with a persistent lifetime, see :secref:`key-identifiers`.

        .. note::
            This is an input parameter: it is not updated with the final key attributes.
            The final attributes of the new key can be queried by calling `psa_get_key_attributes()` with the key's identifier.

    .. param:: psa_key_id_t * key
        On success, an identifier for the newly created key.
        For persistent keys, this is the key identifier defined in ``attributes``.
        `PSA_KEY_ID_NULL` on failure.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
        If the key is persistent, the key material and the key's metadata have been saved to persistent storage.
    .. retval:: PSA_ERROR_ALREADY_EXISTS
        This is an attempt to create a persistent key, and there is already a persistent key with the given identifier.
    .. retval:: PSA_ERROR_NOT_SUPPORTED
        The key attributes, as a whole, are not supported, either by the implementation in general or in the specified storage location.
    .. retval:: PSA_ERROR_INVALID_ARGUMENT
        The following conditions can result in this error:

        *   The key type is invalid, or is an asymmetric public-key type.
        *   The key size is not valid for the key type.
        *   The key lifetime is invalid.
        *   The key identifier is not valid for the key lifetime.
        *   The key usage flags include invalid values.
        *   The key's permitted-usage algorithm is invalid.
        *   The key attributes, as a whole, are invalid.
    .. retval:: PSA_ERROR_NOT_PERMITTED
        The implementation does not permit creating a key with the specified attributes due to some implementation-specific policy.
    .. retval:: PSA_ERROR_INSUFFICIENT_MEMORY
    .. retval:: PSA_ERROR_INSUFFICIENT_ENTROPY
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
    .. retval:: PSA_ERROR_INSUFFICIENT_STORAGE
    .. retval:: PSA_ERROR_STORAGE_FAILURE
    .. retval:: PSA_ERROR_DATA_CORRUPT
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    The key is generated randomly. Its location, policy, type and size are taken from ``attributes``.

    Implementations must reject an attempt to generate a key of size ``0``.

    The key type definitions in :secref:`key-types` provide specific details relating to generation of the key.

    .. note::

        This function is equivalent to calling `psa_generate_key_custom()` with the production parameters `PSA_CUSTOM_KEY_PARAMETERS_INIT` and ``custom_data_length == 0`` (``custom_data`` is ignored).

.. function:: psa_generate_key_custom

    .. summary::
        Generate a key or key pair using custom production parameters.

        .. versionadded:: 1.3

    .. param:: const psa_key_attributes_t * attributes
        The attributes for the new key.

        The following attributes are required for all keys:

        *   The key type. It must not be an asymmetric public key.
        *   The key size. It must be a valid size for the key type.

        The following attributes must be set for keys used in cryptographic operations:

        *   The key permitted-algorithm policy, see :secref:`permitted-algorithms`.
        *   The key usage flags, see :secref:`key-usage-flags`.

        The following attributes must be set for keys that do not use the default `PSA_KEY_LIFETIME_VOLATILE` lifetime:

        *   The key lifetime, see :secref:`key-lifetimes`.
        *   The key identifier is required for a key with a persistent lifetime, see :secref:`key-identifiers`.

        .. note::
            This is an input parameter: it is not updated with the final key attributes.
            The final attributes of the new key can be queried by calling `psa_get_key_attributes()` with the key's identifier.

    .. param:: const psa_custom_key_parameters_t * custom
        Customized production parameters for the key generation.

        When this is `PSA_CUSTOM_KEY_PARAMETERS_INIT` with ``custom_data_length == 0``, this function is equivalent to `psa_generate_key()`.
    .. param:: const uint8_t * custom_data
        A buffer containing additional variable-sized production parameters.
    .. param:: size_t custom_data_length
        Length of ``custom_data`` in bytes.
    .. param:: psa_key_id_t * key
        On success, an identifier for the newly created key.
        For persistent keys, this is the key identifier defined in ``attributes``.
        `PSA_KEY_ID_NULL` on failure.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
        If the key is persistent, the key material and the key's metadata have been saved to persistent storage.
    .. retval:: PSA_ERROR_ALREADY_EXISTS
        This is an attempt to create a persistent key, and there is already a persistent key with the given identifier.
    .. retval:: PSA_ERROR_NOT_SUPPORTED
        The following conditions can result in this error:

        *   The key attributes, as a whole, are not supported, either by the implementation in general or in the specified storage location.
        *   The production parameters are not supported by the implementation.
    .. retval:: PSA_ERROR_INVALID_ARGUMENT
        The following conditions can result in this error:

        *   The key type is invalid, or is an asymmetric public-key type.
        *   The key size is not valid for the key type.
        *   The key lifetime is invalid.
        *   The key identifier is not valid for the key lifetime.
        *   The key usage flags include invalid values.
        *   The key's permitted-usage algorithm is invalid.
        *   The key attributes, as a whole, are invalid.
        *   The production parameters are invalid.
    .. retval:: PSA_ERROR_NOT_PERMITTED
        The implementation does not permit creating a key with the specified attributes due to some implementation-specific policy.
    .. retval:: PSA_ERROR_INSUFFICIENT_MEMORY
    .. retval:: PSA_ERROR_INSUFFICIENT_ENTROPY
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
    .. retval:: PSA_ERROR_INSUFFICIENT_STORAGE
    .. retval:: PSA_ERROR_STORAGE_FAILURE
    .. retval:: PSA_ERROR_DATA_CORRUPT
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    Use this function to provide explicit production parameters when generating a key.
    See the description of `psa_generate_key()` for the operation of this function with the default production parameters.

    The key is generated randomly. Its location, policy, type and size are taken from ``attributes``.

    Implementations must reject an attempt to generate a key of size ``0``.

    See the documentation of `psa_custom_key_parameters_t` for a list of non-default production parameters. See the key type definitions in :secref:`key-types` for details of the custom production parameters used for key generation.

.. function:: psa_copy_key

    .. summary::
        Make a copy of a key.

    .. param:: psa_key_id_t source_key
        The key to copy.
        It must permit the usage `PSA_KEY_USAGE_COPY`.
        If a private or secret key is being copied outside of a secure element it must also permit `PSA_KEY_USAGE_EXPORT`.
    .. param:: const psa_key_attributes_t * attributes
        The attributes for the new key.

        The following attributes must be set for keys used in cryptographic operations:

        *   The key permitted-algorithm policy, see :secref:`permitted-algorithms`.
        *   The key usage flags, see :secref:`key-usage-flags`.

        These flags are combined with the source key policy so that both sets of restrictions apply, as described in the documentation of this function.

        The following attributes must be set for keys that do not use the default `PSA_KEY_LIFETIME_VOLATILE` lifetime:

        *   The key lifetime, see :secref:`key-lifetimes`.
        *   The key identifier is required for a key with a persistent lifetime, see :secref:`key-identifiers`.

        The following attributes are optional:

        *   If the key type has a non-default value, it must be equal to the source key type.
        *   If the key size is nonzero, it must be equal to the source key size.

        .. note::
            This is an input parameter: it is not updated with the final key attributes.
            The final attributes of the new key can be queried by calling `psa_get_key_attributes()` with the key's identifier.

    .. param:: psa_key_id_t * target_key
        On success, an identifier for the newly created key. `PSA_KEY_ID_NULL` on failure.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
        If the new key is persistent, the key material and the key's metadata have been saved to persistent storage.
    .. retval:: PSA_ERROR_INVALID_HANDLE
        ``source_key`` is not a valid key identifier.
    .. retval:: PSA_ERROR_ALREADY_EXISTS
        This is an attempt to create a persistent key, and there is already a persistent key with the given identifier.
    .. retval:: PSA_ERROR_INVALID_ARGUMENT
        The following conditions can result in this error:

        *   ``attributes`` specifies a key type or key size which does not match the attributes of ``source key``.
        *   The lifetime or identifier in ``attributes`` are invalid.
        *   The key policies from ``source_key`` and those specified in ``attributes`` are incompatible.
    .. retval:: PSA_ERROR_NOT_SUPPORTED
        The following conditions can result in this error:

        *   The ``source key`` storage location does not support copying to the target key's storage location.
        *   The key attributes, as a whole, are not supported in the target key's storage location.
    .. retval:: PSA_ERROR_NOT_PERMITTED
        The following conditions can result in this error:

        *   ``source_key`` does not have the `PSA_KEY_USAGE_COPY` usage flag.
        *   ``source_key`` does not have the `PSA_KEY_USAGE_EXPORT` usage flag, and the location of ``target_key`` is outside the security boundary of the ``source_key`` storage location.
        *   The implementation does not permit creating a key with the specified attributes due to some implementation-specific policy.
    .. retval:: PSA_ERROR_INSUFFICIENT_MEMORY
    .. retval:: PSA_ERROR_INSUFFICIENT_STORAGE
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
    .. retval:: PSA_ERROR_STORAGE_FAILURE
    .. retval:: PSA_ERROR_DATA_CORRUPT
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    Copy key material from one location to another. Its location is taken from ``attributes``, its policy is the intersection of the policy in ``attributes`` and the source key policy, and its type and size are taken from the source key.

    This function is primarily useful to copy a key from one location to another, as it populates a key using the material from another key which can have a different lifetime.

    This function can be used to share a key with a different party, subject to implementation-defined restrictions on key sharing.

    The policy on the source key must have the usage flag `PSA_KEY_USAGE_COPY` set. This flag is sufficient to permit the copy if the key has the lifetime `PSA_KEY_LIFETIME_VOLATILE` or `PSA_KEY_LIFETIME_PERSISTENT`. Some secure elements do not provide a way to copy a key without making it extractable from the secure element. If a key is located in such a secure element, then the key must have both usage flags `PSA_KEY_USAGE_COPY` and `PSA_KEY_USAGE_EXPORT` in order to make a copy of the key outside the secure element.

    The resulting key can only be used in a way that conforms to both the policy of the original key and the policy specified in the ``attributes`` parameter:

    *   The usage flags on the resulting key are the bitwise-and of the usage flags on the source policy and the usage flags in ``attributes``.
    *   If both permit the same algorithm or wildcard-based algorithm, the resulting key has the same permitted algorithm.
    *   If either of the policies permits an algorithm and the other policy permits a wildcard-based permitted algorithm that includes this algorithm, the resulting key uses this permitted algorithm.
    *   If the policies do not permit any algorithm in common, this function fails with the status :code:`PSA_ERROR_INVALID_ARGUMENT`.

    As a result, the new key cannot be used for operations that were not permitted on the source key.

    The effect of this function on implementation-defined attributes is implementation-defined.

.. function:: psa_attach_key

    .. summary::
        Register existing key material within the implementation with a volatile key identifier and key policy.

        .. versionadded:: 1.4

    .. param:: const psa_key_attributes_t * attributes
        The attributes for the key to be registered.

        The attributes that are required to be set depend on the identified key material.
        Where an attribute is provided by both the application and the key material, they must be compatible.

        The following attributes must be set:

        *   The key lifetime must specify a volatile key, and the storage location of the existing key material.
            See :secref:`key-lifetimes`.
        *   The key identifier must be the default `PSA_KEY_ID_NULL`.
        *   The key type.

        The following attributes must be set for keys used in cryptographic operations:

        *   The key permitted-algorithm policy, see :secref:`permitted-algorithms`.
        *   The key usage flags, see :secref:`key-usage-flags`.

        The following attributes are optional:

        *   If the key size is nonzero, it must be equal to the key size of the key material.

        .. note::
            The specified location and label must refer to valid key material within the implementation's storage.
            This function does not import or generate key material; it only registers existing key material under the provided attributes.

    .. param:: const uint8_t * label
        Buffer containing a label that identifies the key material to be registered.

        The contents of this label are interpreted by the implementation and may correspond to a pre-provisioned, securely stored, or deterministically derived key within the location specified in the provided attributes.
    .. param:: size_t label_length
        Size of the ``label`` buffer in bytes.
    .. param:: psa_key_id_t * key
        On success, an identifier for the newly created key.
        `PSA_KEY_ID_NULL` on failure.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
    .. retval:: PSA_ERROR_DOES_NOT_EXIST
        `label`` does not refer to key material within the location specified in ``attributes``.
    .. retval:: PSA_ERROR_NOT_SUPPORTED
        The key attributes, as a whole, are not supported, either by the implementation in general or in the specified storage location.
    .. retval:: PSA_ERROR_INVALID_ARGUMENT
        The following conditions can result in this error:

        *   The key type is invalid.
        *   The key size is nonzero, and is incompatible with the stored key material.
        *   The key lifetime specifies a non-volatile persistence level.
        *   The key lifetime specifies an invalid storage location.
        *   The key identifier in the provided attributes is not `PSA_KEY_ID_NULL`.
        *   The key usage flags include invalid values.
        *   The key's permitted-usage algorithm is invalid.
        *   The key attributes, as a whole, are invalid.
        *   The stored key material is incompatible with the provided key attributes.
    .. retval:: PSA_ERROR_NOT_PERMITTED
        The implementation does not permit creating a key with the specified attributes due to some implementation-specific policy.
    .. retval:: PSA_ERROR_INSUFFICIENT_MEMORY
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
    .. retval:: PSA_ERROR_STORAGE_FAILURE
    .. retval:: PSA_ERROR_DATA_CORRUPT
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    This function allows applications to register existing key material that has been provisioned outside the |API|, such as during manufacturing or by a secure element.
    It can also be used to create a key identifier for keys that are deterministically derived from a secret within the implementation.
    After registering the key, the application has a volatile key identifier that can be used in cryptographic operations permitted by its usage flags and algorithm policy.

    The key material is identified by its location, specified in the provided attributes ``lifetime`` value, and the ``label`` parameter.
    The format of the label is specific to the implementation and storage location.
    Typically, the label is used as a location-specific identifier for the key material, or can provide input for deriving the key material from an internal secret.

    This function can only be used to create a volatile key.
    That is, a key with a lifetime persistence level of `PSA_KEY_PERSISTENCE_VOLATILE`.

    The key's policy and type are taken from ``attributes``.
    The attributes can optionally specify a key size; in this case it must match the size determined from the key material.
    A key size of ``0`` in ``attributes`` --- the default value --- indicates that the key size is determined by the key material.

    The provided attributes must accurately describe the key.
    It is recommended that the implementation verifies that the key material is compatible with the provided attributes; but it is the application's responsibility to ensure correctness.

    Calling `psa_destroy_key()` with a key identifier returned by `psa_attach_key()` will remove the key identifer and policy from the key store, but the original key material remains within the implementation.

    It is :scterm:`implementation defined` whether the same key material can be attached to multiple key identifiers concurrently.

    .. note::

        This function is intended for scenarios where key material is provisioned outside the |API|, and the application needs to use such keys within the API framework.

        Implementations may impose restrictions on which keys can be registered, depending on their storage architecture and security policies.

        The function does not allow registering keys that are not already present in the implementation's storage.
        To import new key material, use `psa_import_key()`.

        The function does not modify the key material; it only registers it under the specified identifier and attributes.

        To create a persistent key from pre-existing key material, the implementation might permit a key returned by `psa_attach_key()` to be copied to a persistent key using `psa_copy_key()`.

.. _key-destruction:

Key destruction
---------------

.. function:: psa_destroy_key

    .. summary::
        Destroy a key.

    .. param:: psa_key_id_t key
        Identifier of the key to erase.
        If this is `PSA_KEY_ID_NULL`, do nothing and return :code:`PSA_SUCCESS`.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
        If ``key`` was a valid key identifier, then the key material that it referred to has been erased.
        Alternatively, ``key`` was `PSA_KEY_ID_NULL`.
    .. retval:: PSA_ERROR_NOT_PERMITTED
        The key cannot be erased because it is read-only, either due to a policy or due to physical restrictions.
    .. retval:: PSA_ERROR_INVALID_HANDLE
        ``key`` is neither a valid key identifier, nor `PSA_KEY_ID_NULL`.
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
        There was an failure in communication with the cryptoprocessor. The key material might still be present in the cryptoprocessor.
    .. retval:: PSA_ERROR_STORAGE_FAILURE
        The storage operation failed. Implementations must make a best effort to erase key material even in this situation, however, it might be impossible to guarantee that the key material is not recoverable in such cases.
    .. retval:: PSA_ERROR_DATA_CORRUPT
        The storage is corrupted. Implementations must make a best effort to erase key material even in this situation, however, it might be impossible to guarantee that the key material is not recoverable in such cases.
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
        An unexpected condition which is not a storage corruption or a communication failure occurred. The cryptoprocessor might have been compromised.
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    This function destroys a key from both volatile memory and, if applicable, non-volatile storage. Implementations must make a best effort to ensure that that the key material cannot be recovered.

    This function also erases any metadata such as policies and frees resources associated with the key.

    Destroying the key makes the key identifier invalid, and the key identifier must not be used again by the application.

    If a key is currently in use in a multi-part operation, then destroying the key will cause the multi-part operation to fail.

.. function:: psa_purge_key

    .. summary::
        Remove non-essential copies of key material from memory.

    .. param:: psa_key_id_t key
        Identifier of the key to purge.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
        The key material has been removed from memory, if the key material is not currently required.
    .. retval:: PSA_ERROR_INVALID_HANDLE
        ``key`` is not a valid key identifier.
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
    .. retval:: PSA_ERROR_STORAGE_FAILURE
    .. retval:: PSA_ERROR_DATA_CORRUPT
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    For keys that have been created with the `PSA_KEY_USAGE_CACHE` usage flag, an implementation is permitted to make additional copies of the key material that are not in storage and not for the purpose of ongoing operations.

    This function will remove these extra copies of the key material from memory.

    This function is not required to remove key material from memory in any of the following situations:

    *   The key is currently in use in a cryptographic operation.
    *   The key is volatile.

    See also :secref:`key-material`.


.. _key-export:

Key export
----------

.. function:: psa_export_key

    .. summary::
        Export a key in binary format.

    .. param:: psa_key_id_t key
        Identifier of the key to export.
        It must permit the usage `PSA_KEY_USAGE_EXPORT`, unless it is a public key.
    .. param:: uint8_t * data
        Buffer where the key data is to be written.
    .. param:: size_t data_size
        Size of the ``data`` buffer in bytes.
        This must be appropriate for the key:

        *   The required output size is :code:`PSA_EXPORT_KEY_OUTPUT_SIZE(type, bits)` where ``type`` is the key type and ``bits`` is the key size in bits.
        *   `PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE` evaluates to the maximum output size of any supported public key or key pair.
        *   `PSA_EXPORT_KEY_PAIR_MAX_SIZE` evaluates to the maximum output size of any supported key pair.
        *   `PSA_EXPORT_PUBLIC_KEY_MAX_SIZE` evaluates to the maximum output size of any supported public key.
        *   This API defines no maximum size for symmetric keys. Arbitrarily large data items can be stored in the key store, for example certificates that correspond to a stored private key or input material for key derivation.

    .. param:: size_t * data_length
        On success, the number of bytes that make up the key data.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
        The first ``(*data_length)`` bytes of ``data`` contain the exported key.
    .. retval:: PSA_ERROR_INVALID_HANDLE
        ``key`` is not a valid key identifier.
    .. retval:: PSA_ERROR_NOT_PERMITTED
        The key does not have the `PSA_KEY_USAGE_EXPORT` flag.
    .. retval:: PSA_ERROR_NOT_SUPPORTED
        The following conditions can result in this error:

        *   The key's storage location does not support export of the key.
        *   The implementation does not support export of keys with this key type.
    .. retval:: PSA_ERROR_BUFFER_TOO_SMALL
        The size of the ``data`` buffer is too small.
        `PSA_EXPORT_KEY_OUTPUT_SIZE()`, `PSA_EXPORT_KEY_PAIR_MAX_SIZE`, `PSA_EXPORT_PUBLIC_KEY_MAX_SIZE`, or `PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE` can be used to determine a sufficient buffer size.
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
    .. retval:: PSA_ERROR_STORAGE_FAILURE
    .. retval:: PSA_ERROR_DATA_CORRUPT
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_INSUFFICIENT_MEMORY
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    The output of this function can be passed to `psa_import_key()` to create an equivalent object.

    If the implementation of `psa_import_key()` supports other formats beyond the format specified here, the output from `psa_export_key()` must use the representation specified in :secref:`key-types`, not the originally imported representation.

    For standard key types, the output format is defined in the relevant *Key format* section in :secref:`key-types`.
    The policy on the key must have the usage flag `PSA_KEY_USAGE_EXPORT` set.

.. function:: psa_export_public_key

    .. summary::
        Export a public key or the public part of a key pair in binary format.

    .. param:: psa_key_id_t key
        Identifier of the key to export.
    .. param:: uint8_t * data
        Buffer where the key data is to be written.
    .. param:: size_t data_size
        Size of the ``data`` buffer in bytes.
        This must be appropriate for the key:

        *   The required output size is :code:`PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE(type, bits)` where ``type`` is the key type and ``bits`` is the key size in bits.
        *   `PSA_EXPORT_PUBLIC_KEY_MAX_SIZE` evaluates to the maximum output size of any supported public key or public part of a key pair.
        *   `PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE` evaluates to the maximum output size of any supported public key or key pair.

    .. param:: size_t * data_length
        On success, the number of bytes that make up the key data.

    .. return:: psa_status_t
    .. retval:: PSA_SUCCESS
        Success.
        The first ``(*data_length)`` bytes of ``data`` contain the exported public key.
    .. retval:: PSA_ERROR_INVALID_HANDLE
        ``key`` is not a valid key identifier.
    .. retval:: PSA_ERROR_INVALID_ARGUMENT
        The key is neither a public key nor a key pair.
    .. retval:: PSA_ERROR_NOT_SUPPORTED
        The following conditions can result in this error:

        *   The key's storage location does not support export of the key.
        *   The implementation does not support export of keys with this key type.
    .. retval:: PSA_ERROR_BUFFER_TOO_SMALL
        The size of the ``data`` buffer is too small.
        `PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE()`, `PSA_EXPORT_PUBLIC_KEY_MAX_SIZE`, or `PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE` can be used to determine a sufficient buffer size.
    .. retval:: PSA_ERROR_COMMUNICATION_FAILURE
    .. retval:: PSA_ERROR_CORRUPTION_DETECTED
    .. retval:: PSA_ERROR_STORAGE_FAILURE
    .. retval:: PSA_ERROR_DATA_CORRUPT
    .. retval:: PSA_ERROR_DATA_INVALID
    .. retval:: PSA_ERROR_INSUFFICIENT_MEMORY
    .. retval:: PSA_ERROR_BAD_STATE
        The library requires initializing by a call to `psa_crypto_init()`.

    The output of this function can be passed to `psa_import_key()` to create an object that is equivalent to the public key.

    If the implementation of `psa_import_key()` supports other formats beyond the format specified here, the output from `psa_export_public_key()` must use the representation specified in :secref:`key-types`, not the originally imported representation.

    For standard key types, the output format is defined in the relevant *Key format* section in :secref:`key-types`.

    Exporting a public-key object or the public part of a key pair is always permitted, regardless of the key's usage flags.

.. macro:: PSA_EXPORT_KEY_OUTPUT_SIZE
    :definition: /* implementation-defined value */

    .. summary::
        Sufficient output buffer size for `psa_export_key()`.

    .. param:: key_type
        A supported key type.
    .. param:: key_bits
        The size of the key in bits.

    .. return::
        If the parameters are valid and supported, return a buffer size in bytes that guarantees that `psa_export_key()` or `psa_export_public_key()` will not fail with :code:`PSA_ERROR_BUFFER_TOO_SMALL`. If the parameters are a valid combination that is not supported by the implementation, this macro must return either a sensible size or ``0``. If the parameters are not valid, the return value is unspecified.

    The following code illustrates how to allocate enough memory to export a key by querying the key type and size at runtime.

    .. code-block:: xref

        psa_key_attributes_t attributes = PSA_KEY_ATTRIBUTES_INIT;
        psa_status_t status;
        status = psa_get_key_attributes(key, &attributes);
        if (status != PSA_SUCCESS)
            handle_error(...);
        psa_key_type_t key_type = psa_get_key_type(&attributes);
        size_t key_bits = psa_get_key_bits(&attributes);
        size_t buffer_size = PSA_EXPORT_KEY_OUTPUT_SIZE(key_type, key_bits);
        psa_reset_key_attributes(&attributes);
        uint8_t *buffer = malloc(buffer_size);
        if (buffer == NULL)
            handle_error(...);
        size_t buffer_length;
        status = psa_export_key(key, buffer, buffer_size, &buffer_length);
        if (status != PSA_SUCCESS)
            handle_error(...);

    See also `PSA_EXPORT_KEY_PAIR_MAX_SIZE`, `PSA_EXPORT_PUBLIC_KEY_MAX_SIZE`, and `PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE`.

.. macro:: PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE
    :definition: /* implementation-defined value */

    .. summary::
        Sufficient output buffer size for `psa_export_public_key()`.

    .. param:: key_type
        A public-key or key-pair key type.
    .. param:: key_bits
        The size of the key in bits.

    .. return::
        If the parameters are valid and supported, return a buffer size in bytes that guarantees that `psa_export_public_key()` will not fail with :code:`PSA_ERROR_BUFFER_TOO_SMALL`. If the parameters are a valid combination that is not supported by the implementation, this macro must return either a sensible size or ``0``. If the parameters are not valid, the return value is unspecified.

        If the parameters are valid and supported, it is recommended that this macro returns the same result as :code:`PSA_EXPORT_KEY_OUTPUT_SIZE(PSA_KEY_TYPE_PUBLIC_KEY_OF_KEY_PAIR(key_type), key_bits)`.

    The following code illustrates how to allocate enough memory to export a public key by querying the key type and size at runtime.

    .. code-block:: xref

        psa_key_attributes_t attributes = PSA_KEY_ATTRIBUTES_INIT;
        psa_status_t status;
        status = psa_get_key_attributes(key, &attributes);
        if (status != PSA_SUCCESS)
            handle_error(...);
        psa_key_type_t key_type = psa_get_key_type(&attributes);
        size_t key_bits = psa_get_key_bits(&attributes);
        size_t buffer_size = PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE(key_type, key_bits);
        psa_reset_key_attributes(&attributes);
        uint8_t *buffer = malloc(buffer_size);
        if (buffer == NULL)
            handle_error(...);
        size_t buffer_length;
        status = psa_export_public_key(key, buffer, buffer_size, &buffer_length);
        if (status != PSA_SUCCESS)
            handle_error(...);

    See also `PSA_EXPORT_PUBLIC_KEY_MAX_SIZE` and `PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE`.

.. macro:: PSA_EXPORT_KEY_PAIR_MAX_SIZE
    :definition: /* implementation-defined value */

    .. summary::
        Sufficient buffer size for exporting any asymmetric key pair.

    This value must be a sufficient buffer size when calling `psa_export_key()` to export any asymmetric key pair that is supported by the implementation, regardless of the exact key type and key size.

    See also `PSA_EXPORT_KEY_OUTPUT_SIZE()`, `PSA_EXPORT_PUBLIC_KEY_MAX_SIZE`, and `PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE`.

.. macro:: PSA_EXPORT_PUBLIC_KEY_MAX_SIZE
    :definition: /* implementation-defined value */

    .. summary::
        Sufficient buffer size for exporting any asymmetric public key.

    This value must be a sufficient buffer size when calling `psa_export_key()` or `psa_export_public_key()` to export any asymmetric public key that is supported by the implementation, regardless of the exact key type and key size.

    See also `PSA_EXPORT_PUBLIC_KEY_OUTPUT_SIZE()`, `PSA_EXPORT_KEY_OUTPUT_SIZE()`, `PSA_EXPORT_KEY_PAIR_MAX_SIZE`, and `PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE`.

.. macro:: PSA_EXPORT_ASYMMETRIC_KEY_MAX_SIZE
    :definition: /* implementation-defined value */

    .. summary::
        Sufficient buffer size for exporting any asymmetric key pair or public key.

        .. versionadded:: 1.3

    This value must be a sufficient buffer size when calling `psa_export_key()` or `psa_export_public_key()` to export any asymmetric key pair or public key that is supported by the implementation, regardless of the exact key type and key size.

    See also `PSA_EXPORT_KEY_PAIR_MAX_SIZE`, `PSA_EXPORT_PUBLIC_KEY_MAX_SIZE`, and `PSA_EXPORT_KEY_OUTPUT_SIZE()`.
